/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    tenants: Tenant;
    'student-settings': StudentSetting;
    users: User;
    progress: Progress;
    points: Point;
    levels: Level;
    achievements: Achievement;
    badges: Badge;
    streaks: Streak;
    leaderboards: Leaderboard;
    enrollments: Enrollment;
    courses: Course;
    modules: Module;
    lessons: Lesson;
    media: Media;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    tenants: TenantsSelect<false> | TenantsSelect<true>;
    'student-settings': StudentSettingsSelect<false> | StudentSettingsSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    progress: ProgressSelect<false> | ProgressSelect<true>;
    points: PointsSelect<false> | PointsSelect<true>;
    levels: LevelsSelect<false> | LevelsSelect<true>;
    achievements: AchievementsSelect<false> | AchievementsSelect<true>;
    badges: BadgesSelect<false> | BadgesSelect<true>;
    streaks: StreaksSelect<false> | StreaksSelect<true>;
    leaderboards: LeaderboardsSelect<false> | LeaderboardsSelect<true>;
    enrollments: EnrollmentsSelect<false> | EnrollmentsSelect<true>;
    courses: CoursesSelect<false> | CoursesSelect<true>;
    modules: ModulesSelect<false> | ModulesSelect<true>;
    lessons: LessonsSelect<false> | LessonsSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * Organizations using the platform
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tenants".
 */
export interface Tenant {
  id: number;
  /**
   * The display name of the tenant
   */
  name: string;
  /**
   * URL-friendly identifier for the tenant
   */
  slug: string;
  /**
   * Custom domain for the tenant
   */
  domain?: string | null;
  /**
   * Current status of the tenant
   */
  status: 'active' | 'suspended' | 'pending';
  /**
   * Subscription plan level
   */
  plan: 'basic' | 'pro' | 'enterprise';
  /**
   * Subscription details
   */
  subscription?: {
    /**
     * When the subscription started
     */
    startDate?: string | null;
    /**
     * When the subscription renews
     */
    renewalDate?: string | null;
    /**
     * Stripe customer ID
     */
    stripeCustomerId?: string | null;
  };
  settings?: {
    theme?: ('light' | 'dark' | 'system') | null;
    logo?: (number | null) | Media;
    colors?: {
      primary?: string | null;
      secondary?: string | null;
    };
  };
  features?: {
    /**
     * Enable gamification features
     */
    gamification?: boolean | null;
    /**
     * Enable adaptive learning features
     */
    adaptiveLearning?: boolean | null;
    /**
     * Enable analytics tracking
     */
    analytics?: boolean | null;
    /**
     * Enable API access
     */
    api?: boolean | null;
  };
  /**
   * Usage metrics and analytics
   */
  analytics?: {
    /**
     * Total number of users
     */
    totalUsers?: number | null;
    /**
     * Total number of courses
     */
    totalCourses?: number | null;
    /**
     * Storage space used in bytes
     */
    storageUsed?: number | null;
    /**
     * Last activity in the tenant
     */
    lastActivityAt?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * Media files and images
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  /**
   * The tenant this media belongs to
   */
  tenant?: (number | null) | Tenant;
  /**
   * Make this media available to all tenants
   */
  isGlobal?: boolean | null;
  /**
   * Alternative text for the image
   */
  alt?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    card?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * Student preferences and settings
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "student-settings".
 */
export interface StudentSetting {
  id: number;
  /**
   * The user this settings belong to
   */
  user: number | User;
  preferences?: {
    /**
     * The default theme for the user
     */
    theme?: ('light' | 'dark' | 'system') | null;
    /**
     * Email notifications for the user
     */
    emailNotifications?: {
      assignments?: boolean | null;
      courseUpdates?: boolean | null;
      achievements?: boolean | null;
    };
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * Users of the platform
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  /**
   * Full name of the user
   */
  name: string;
  /**
   * Maximum size: 4MB. Accepted formats: .jpg, .jpeg, .png, .gif
   */
  avatar?: (number | null) | Media;
  /**
   * User role determines permissions
   */
  role: 'admin' | 'instructor' | 'student';
  /**
   * Organization this user belongs to
   */
  tenant?: (number | null) | Tenant;
  /**
   * User preferences and settings
   */
  settings?: (number | null) | StudentSetting;
  /**
   * Last time user was active
   */
  lastActive?: string | null;
  updatedAt: string;
  createdAt: string;
  enableAPIKey?: boolean | null;
  apiKey?: string | null;
  apiKeyIndex?: string | null;
  /**
   * Email address used for login
   */
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * Student progress in courses
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "progress".
 */
export interface Progress {
  id: number;
  /**
   * The student whose progress this is
   */
  student: number | User;
  /**
   * The course this progress is for
   */
  course: number | Course;
  status: 'not_started' | 'in_progress' | 'completed';
  /**
   * Overall progress percentage in the course
   */
  overallProgress: number;
  /**
   * Total points earned in this course
   */
  pointsEarned: number;
  /**
   * Total points earned across all courses
   */
  totalPoints: number;
  /**
   * Whether this progress record is available globally
   */
  isGlobal?: boolean | null;
  /**
   * When the student started the course
   */
  startedAt: string;
  /**
   * When the student completed the course
   */
  completedAt?: string | null;
  /**
   * When the student last accessed the course
   */
  lastAccessed: string;
  /**
   * Progress in individual modules
   */
  moduleProgress?:
    | {
        module: number | Module;
        status: 'not_started' | 'in_progress' | 'completed';
        progress: number;
        id?: string | null;
      }[]
    | null;
  /**
   * Quiz attempts and scores
   */
  quizAttempts?:
    | {
        /**
         * The lesson containing the quiz
         */
        lesson?: (number | null) | Lesson;
        score: number;
        completedAt: string;
        id?: string | null;
      }[]
    | null;
  /**
   * Discussion participation
   */
  discussions?:
    | {
        /**
         * The lesson containing the discussion
         */
        lesson?: (number | null) | Lesson;
        participatedAt: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Course content and structure
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "courses".
 */
export interface Course {
  id: number;
  /**
   * The title of the course
   */
  title: string;
  /**
   * URL-friendly version of the title (auto-generated if not provided)
   */
  slug: string;
  /**
   * The organization this course belongs to
   */
  tenant?: (number | null) | Tenant;
  /**
   * Make this course available to all tenants
   */
  isGlobal?: boolean | null;
  /**
   * The instructor responsible for this course
   */
  instructor: number | User;
  /**
   * Detailed description of the course content and objectives
   */
  description: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * Course thumbnail image (16:9 ratio recommended)
   */
  thumbnail: number | Media;
  /**
   * Course modules in sequential order
   */
  modules?: (number | Module)[] | null;
  prerequisites?: (number | Course)[] | null;
  duration: {
    hours: number;
    minutes: number;
  };
  schedule: {
    startDate: string;
    endDate: string;
    enrollmentDeadline?: string | null;
  };
  status: 'draft' | 'published' | 'archived';
  settings?: {
    allowLateSubmissions?: boolean | null;
    requirePrerequisites?: boolean | null;
    showProgress?: boolean | null;
  };
  enrollment?: {
    /**
     * Maximum number of students (0 for unlimited)
     */
    capacity?: number | null;
    /**
     * Allow students to enroll themselves
     */
    allowSelfEnrollment?: boolean | null;
    /**
     * Enforce prerequisite course completion
     */
    requirePrerequisiteCompletion?: boolean | null;
    /**
     * When enrollment opens
     */
    enrollmentStart?: string | null;
    /**
     * When enrollment closes
     */
    enrollmentEnd?: string | null;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * Course modules and sections
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "modules".
 */
export interface Module {
  id: number;
  title: string;
  description?: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * The course this module belongs to
   */
  course: number | Course;
  /**
   * Order in which this module appears in the course
   */
  order: number;
  /**
   * Lessons within this module
   */
  lessons?: (number | Lesson)[] | null;
  duration: {
    hours: number;
    minutes: number;
  };
  status: 'draft' | 'published' | 'archived';
  completionCriteria: {
    type: 'all_lessons' | 'min_score' | 'custom';
    /**
     * Minimum score required to complete this module
     */
    minimumScore?: number | null;
    /**
     * Custom completion rule (evaluated at runtime)
     */
    customRule?: string | null;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * Individual lessons within modules
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "lessons".
 */
export interface Lesson {
  id: number;
  /**
   * The title of the lesson
   */
  title: string;
  /**
   * The module this lesson belongs to
   */
  module: number | Module;
  /**
   * Order in which this lesson appears in the module
   */
  order: number;
  /**
   * The type of lesson content
   */
  type: 'video' | 'reading' | 'quiz' | 'assignment' | 'discussion';
  /**
   * Brief overview of the lesson
   */
  description?: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  video?: {
    /**
     * URL of the video (YouTube, Vimeo, etc.)
     */
    url: string;
    /**
     * Duration in minutes
     */
    duration: number;
    /**
     * Video transcript for accessibility
     */
    transcript?: string | null;
  };
  /**
   * Lesson content in rich text format
   */
  content?: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  quiz?: {
    questions: {
      question: string;
      type: 'multiple' | 'boolean' | 'text';
      options?:
        | {
            text: string;
            correct: boolean;
            id?: string | null;
          }[]
        | null;
      answer?: string | null;
      points: number;
      /**
       * Explanation of the correct answer
       */
      explanation?: {
        root: {
          type: string;
          children: {
            type: any;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      } | null;
      id?: string | null;
    }[];
    settings: {
      /**
       * Time limit in minutes (0 for no limit)
       */
      timeLimit?: number | null;
      /**
       * Number of attempts allowed
       */
      attempts?: number | null;
      /**
       * Minimum score required to pass (%)
       */
      passingScore: number;
      randomizeQuestions?: boolean | null;
      showCorrectAnswers?: ('never' | 'after_each' | 'after_submit' | 'after_all') | null;
    };
  };
  assignment?: {
    instructions: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    dueDate: string;
    points: number;
    rubric?:
      | {
          criterion: string;
          points: number;
          description?: string | null;
          id?: string | null;
        }[]
      | null;
    allowedFileTypes?: ('pdf' | 'doc' | 'image' | 'zip' | 'code')[] | null;
  };
  discussion?: {
    prompt: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    guidelines?:
      | {
          text: string;
          id?: string | null;
        }[]
      | null;
    settings?: {
      requireResponse?: boolean | null;
      /**
       * Number of replies required (0 for none)
       */
      requireReplies?: number | null;
      /**
       * Minimum words required per post
       */
      minimumWords?: number | null;
      dueDate?: string | null;
    };
  };
  status: 'draft' | 'published' | 'archived';
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * Point transactions for gamification
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "points".
 */
export interface Point {
  id: number;
  /**
   * Student who earned the points
   */
  student: number | User;
  /**
   * Type of activity that earned points
   */
  type:
    | 'lesson_complete'
    | 'quiz_score'
    | 'assignment_submit'
    | 'discussion_post'
    | 'streak_bonus'
    | 'achievement_unlock';
  /**
   * Number of points earned
   */
  amount: number;
  /**
   * Source that generated these points
   */
  source: {
    type: 'lessons' | 'achievements' | 'streaks';
    lesson?: (number | null) | Lesson;
    achievement?: (number | null) | Achievement;
    streak?: (number | null) | Streak;
  };
  /**
   * Additional context about the points earned
   */
  metadata?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Achievement definitions and criteria
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "achievements".
 */
export interface Achievement {
  id: number;
  /**
   * Name of the achievement
   */
  name: string;
  /**
   * Tenant this achievement belongs to
   */
  tenant?: (number | null) | Tenant;
  /**
   * Detailed description of how to earn this achievement
   */
  description: string;
  /**
   * Type of activity tracked
   */
  type: 'course_progress' | 'quiz_score' | 'assignment' | 'streak' | 'discussion' | 'custom';
  criteria: {
    /**
     * What to measure
     */
    metric: 'count' | 'score' | 'duration' | 'custom';
    /**
     * Target value to achieve
     */
    threshold: number;
    /**
     * Time period to measure over
     */
    timeframe?: ('all_time' | 'daily' | 'weekly' | 'monthly') | null;
    /**
     * Custom achievement criteria logic
     */
    customRule?: string | null;
  };
  /**
   * Badge awarded for this achievement
   */
  badge: number | Badge;
  /**
   * Points awarded for this achievement
   */
  points: number;
  /**
   * Hide this achievement until unlocked
   */
  secret?: boolean | null;
  /**
   * Make this achievement available to all tenants
   */
  isGlobal?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Achievement badges for gamification
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "badges".
 */
export interface Badge {
  id: number;
  /**
   * Name of the badge
   */
  name: string;
  /**
   * Detailed description of how to earn this badge
   */
  description: string;
  /**
   * Badge icon image
   */
  icon: number | Media;
  /**
   * Badge rarity level
   */
  rarity: 'common' | 'uncommon' | 'rare' | 'epic' | 'legendary';
  /**
   * Badge category
   */
  category: 'progress' | 'performance' | 'engagement' | 'special';
  /**
   * Tenant this badge belongs to
   */
  tenant?: (number | null) | Tenant;
  /**
   * Make this badge available to all tenants
   */
  isGlobal?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * User activity streaks and history
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "streaks".
 */
export interface Streak {
  id: number;
  /**
   * The student this streak belongs to
   */
  student: number | User;
  /**
   * Type of activity being tracked
   */
  type: 'login' | 'progress' | 'quiz' | 'assignment';
  /**
   * Current consecutive days of activity
   */
  currentStreak: number;
  /**
   * Longest streak achieved
   */
  longestStreak: number;
  /**
   * Last time this streak was updated
   */
  lastActivity: string;
  /**
   * When the next activity is required to maintain streak
   */
  nextRequired: string;
  /**
   * History of activities that contributed to this streak
   */
  history?:
    | {
        date: string;
        /**
         * The activity that contributed to this streak
         */
        activity:
          | {
              relationTo: 'courses';
              value: number | Course;
            }
          | {
              relationTo: 'lessons';
              value: number | Lesson;
            }
          | {
              relationTo: 'modules';
              value: number | Module;
            };
        points: number;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Level definitions and rewards
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "levels".
 */
export interface Level {
  id: number;
  /**
   * Display name for the level
   */
  name: string;
  /**
   * Numeric level value (unique per tenant)
   */
  level: number;
  /**
   * Detailed description of the level
   */
  description?: string | null;
  /**
   * Points needed to reach this level
   */
  pointsRequired: number;
  /**
   * The tenant this level belongs to
   */
  tenant?: (number | null) | Tenant;
  /**
   * Make this level available to all tenants
   */
  isGlobal?: boolean | null;
  /**
   * Level icon image
   */
  icon: number | Media;
  /**
   * Rewards earned at this level
   */
  rewards?:
    | {
        type: 'badge' | 'feature' | 'custom';
        /**
         * Badge awarded at this level
         */
        badge?: (number | null) | Badge;
        /**
         * Feature unlocked at this level
         */
        feature?: string | null;
        /**
         * Custom reward data
         */
        customData?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Leaderboard configurations
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "leaderboards".
 */
export interface Leaderboard {
  id: number;
  /**
   * Display name for the leaderboard
   */
  name: string;
  /**
   * Tenant this leaderboard belongs to
   */
  tenant?: (number | null) | Tenant;
  /**
   * Make this leaderboard available to all tenants
   */
  isGlobal?: boolean | null;
  /**
   * What to rank users by
   */
  type: 'points' | 'progress' | 'achievements' | 'custom';
  /**
   * Time period to rank over
   */
  timeframe: 'all_time' | 'daily' | 'weekly' | 'monthly';
  scope?: {
    /**
     * Limit to specific course
     */
    course?: (number | null) | Course;
    pointType?: ('all' | 'lesson' | 'quiz' | 'assignment') | null;
    achievementType?: ('all' | 'course' | 'quiz' | 'streak') | null;
  };
  /**
   * Custom ranking logic
   */
  customLogic?: string | null;
  /**
   * Number of top ranks to display
   */
  displayLimit: number;
  /**
   * How often to refresh rankings (in seconds)
   */
  refreshInterval: number;
  updatedAt: string;
  createdAt: string;
}
/**
 * Student course enrollments
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "enrollments".
 */
export interface Enrollment {
  id: number;
  /**
   * The enrolled student
   */
  student: number | User;
  /**
   * The course being enrolled in
   */
  course: number | Course;
  status: 'active' | 'completed' | 'dropped' | 'pending';
  /**
   * When the enrollment was created
   */
  enrolledAt: string;
  /**
   * When the student started the course
   */
  startedAt?: string | null;
  /**
   * When the student completed the course
   */
  completedAt?: string | null;
  /**
   * When the student dropped the course
   */
  droppedAt?: string | null;
  /**
   * When the enrollment expires
   */
  expiresAt?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'tenants';
        value: number | Tenant;
      } | null)
    | ({
        relationTo: 'student-settings';
        value: number | StudentSetting;
      } | null)
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'progress';
        value: number | Progress;
      } | null)
    | ({
        relationTo: 'points';
        value: number | Point;
      } | null)
    | ({
        relationTo: 'levels';
        value: number | Level;
      } | null)
    | ({
        relationTo: 'achievements';
        value: number | Achievement;
      } | null)
    | ({
        relationTo: 'badges';
        value: number | Badge;
      } | null)
    | ({
        relationTo: 'streaks';
        value: number | Streak;
      } | null)
    | ({
        relationTo: 'leaderboards';
        value: number | Leaderboard;
      } | null)
    | ({
        relationTo: 'enrollments';
        value: number | Enrollment;
      } | null)
    | ({
        relationTo: 'courses';
        value: number | Course;
      } | null)
    | ({
        relationTo: 'modules';
        value: number | Module;
      } | null)
    | ({
        relationTo: 'lessons';
        value: number | Lesson;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tenants_select".
 */
export interface TenantsSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  domain?: T;
  status?: T;
  plan?: T;
  subscription?:
    | T
    | {
        startDate?: T;
        renewalDate?: T;
        stripeCustomerId?: T;
      };
  settings?:
    | T
    | {
        theme?: T;
        logo?: T;
        colors?:
          | T
          | {
              primary?: T;
              secondary?: T;
            };
      };
  features?:
    | T
    | {
        gamification?: T;
        adaptiveLearning?: T;
        analytics?: T;
        api?: T;
      };
  analytics?:
    | T
    | {
        totalUsers?: T;
        totalCourses?: T;
        storageUsed?: T;
        lastActivityAt?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "student-settings_select".
 */
export interface StudentSettingsSelect<T extends boolean = true> {
  user?: T;
  preferences?:
    | T
    | {
        theme?: T;
        emailNotifications?:
          | T
          | {
              assignments?: T;
              courseUpdates?: T;
              achievements?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  avatar?: T;
  role?: T;
  tenant?: T;
  settings?: T;
  lastActive?: T;
  updatedAt?: T;
  createdAt?: T;
  enableAPIKey?: T;
  apiKey?: T;
  apiKeyIndex?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "progress_select".
 */
export interface ProgressSelect<T extends boolean = true> {
  student?: T;
  course?: T;
  status?: T;
  overallProgress?: T;
  pointsEarned?: T;
  totalPoints?: T;
  isGlobal?: T;
  startedAt?: T;
  completedAt?: T;
  lastAccessed?: T;
  moduleProgress?:
    | T
    | {
        module?: T;
        status?: T;
        progress?: T;
        id?: T;
      };
  quizAttempts?:
    | T
    | {
        lesson?: T;
        score?: T;
        completedAt?: T;
        id?: T;
      };
  discussions?:
    | T
    | {
        lesson?: T;
        participatedAt?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "points_select".
 */
export interface PointsSelect<T extends boolean = true> {
  student?: T;
  type?: T;
  amount?: T;
  source?:
    | T
    | {
        type?: T;
        lesson?: T;
        achievement?: T;
        streak?: T;
      };
  metadata?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "levels_select".
 */
export interface LevelsSelect<T extends boolean = true> {
  name?: T;
  level?: T;
  description?: T;
  pointsRequired?: T;
  tenant?: T;
  isGlobal?: T;
  icon?: T;
  rewards?:
    | T
    | {
        type?: T;
        badge?: T;
        feature?: T;
        customData?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "achievements_select".
 */
export interface AchievementsSelect<T extends boolean = true> {
  name?: T;
  tenant?: T;
  description?: T;
  type?: T;
  criteria?:
    | T
    | {
        metric?: T;
        threshold?: T;
        timeframe?: T;
        customRule?: T;
      };
  badge?: T;
  points?: T;
  secret?: T;
  isGlobal?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "badges_select".
 */
export interface BadgesSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  icon?: T;
  rarity?: T;
  category?: T;
  tenant?: T;
  isGlobal?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "streaks_select".
 */
export interface StreaksSelect<T extends boolean = true> {
  student?: T;
  type?: T;
  currentStreak?: T;
  longestStreak?: T;
  lastActivity?: T;
  nextRequired?: T;
  history?:
    | T
    | {
        date?: T;
        activity?: T;
        points?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "leaderboards_select".
 */
export interface LeaderboardsSelect<T extends boolean = true> {
  name?: T;
  tenant?: T;
  isGlobal?: T;
  type?: T;
  timeframe?: T;
  scope?:
    | T
    | {
        course?: T;
        pointType?: T;
        achievementType?: T;
      };
  customLogic?: T;
  displayLimit?: T;
  refreshInterval?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "enrollments_select".
 */
export interface EnrollmentsSelect<T extends boolean = true> {
  student?: T;
  course?: T;
  status?: T;
  enrolledAt?: T;
  startedAt?: T;
  completedAt?: T;
  droppedAt?: T;
  expiresAt?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "courses_select".
 */
export interface CoursesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  tenant?: T;
  isGlobal?: T;
  instructor?: T;
  description?: T;
  thumbnail?: T;
  modules?: T;
  prerequisites?: T;
  duration?:
    | T
    | {
        hours?: T;
        minutes?: T;
      };
  schedule?:
    | T
    | {
        startDate?: T;
        endDate?: T;
        enrollmentDeadline?: T;
      };
  status?: T;
  settings?:
    | T
    | {
        allowLateSubmissions?: T;
        requirePrerequisites?: T;
        showProgress?: T;
      };
  enrollment?:
    | T
    | {
        capacity?: T;
        allowSelfEnrollment?: T;
        requirePrerequisiteCompletion?: T;
        enrollmentStart?: T;
        enrollmentEnd?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "modules_select".
 */
export interface ModulesSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  course?: T;
  order?: T;
  lessons?: T;
  duration?:
    | T
    | {
        hours?: T;
        minutes?: T;
      };
  status?: T;
  completionCriteria?:
    | T
    | {
        type?: T;
        minimumScore?: T;
        customRule?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "lessons_select".
 */
export interface LessonsSelect<T extends boolean = true> {
  title?: T;
  module?: T;
  order?: T;
  type?: T;
  description?: T;
  video?:
    | T
    | {
        url?: T;
        duration?: T;
        transcript?: T;
      };
  content?: T;
  quiz?:
    | T
    | {
        questions?:
          | T
          | {
              question?: T;
              type?: T;
              options?:
                | T
                | {
                    text?: T;
                    correct?: T;
                    id?: T;
                  };
              answer?: T;
              points?: T;
              explanation?: T;
              id?: T;
            };
        settings?:
          | T
          | {
              timeLimit?: T;
              attempts?: T;
              passingScore?: T;
              randomizeQuestions?: T;
              showCorrectAnswers?: T;
            };
      };
  assignment?:
    | T
    | {
        instructions?: T;
        dueDate?: T;
        points?: T;
        rubric?:
          | T
          | {
              criterion?: T;
              points?: T;
              description?: T;
              id?: T;
            };
        allowedFileTypes?: T;
      };
  discussion?:
    | T
    | {
        prompt?: T;
        guidelines?:
          | T
          | {
              text?: T;
              id?: T;
            };
        settings?:
          | T
          | {
              requireResponse?: T;
              requireReplies?: T;
              minimumWords?: T;
              dueDate?: T;
            };
      };
  status?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  tenant?: T;
  isGlobal?: T;
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        card?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}
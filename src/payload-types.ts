/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  collections: {
    users: User;
    media: Media;
    tenants: Tenant;
    'student-settings': StudentSetting;
    courses: Course;
    modules: Module;
    lessons: Lesson;
    progress: Progress;
    enrollments: Enrollment;
    levels: Level;
    points: Point;
    badges: Badge;
    achievements: Achievement;
    leaderboards: Leaderboard;
    streaks: Streak;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    tenants: TenantsSelect<false> | TenantsSelect<true>;
    'student-settings': StudentSettingsSelect<false> | StudentSettingsSelect<true>;
    courses: CoursesSelect<false> | CoursesSelect<true>;
    modules: ModulesSelect<false> | ModulesSelect<true>;
    lessons: LessonsSelect<false> | LessonsSelect<true>;
    progress: ProgressSelect<false> | ProgressSelect<true>;
    enrollments: EnrollmentsSelect<false> | EnrollmentsSelect<true>;
    levels: LevelsSelect<false> | LevelsSelect<true>;
    points: PointsSelect<false> | PointsSelect<true>;
    badges: BadgesSelect<false> | BadgesSelect<true>;
    achievements: AchievementsSelect<false> | AchievementsSelect<true>;
    leaderboards: LeaderboardsSelect<false> | LeaderboardsSelect<true>;
    streaks: StreaksSelect<false> | StreaksSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  role: 'admin' | 'instructor' | 'student';
  tenant?: (number | null) | Tenant;
  name: string;
  avatar?: (number | null) | Media;
  settings?: (number | null) | StudentSetting;
  updatedAt: string;
  createdAt: string;
  enableAPIKey?: boolean | null;
  apiKey?: string | null;
  apiKeyIndex?: string | null;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tenants".
 */
export interface Tenant {
  id: number;
  name: string;
  slug: string;
  settings?: {
    theme?: ('light' | 'dark' | 'system') | null;
    logo?: (number | null) | Media;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  tenant?: (number | null) | Tenant;
  isGlobal?: boolean | null;
  alt?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    card?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "student-settings".
 */
export interface StudentSetting {
  id: number;
  user: number | User;
  preferences?: {
    theme?: ('light' | 'dark' | 'system') | null;
    emailNotifications?: {
      assignments?: boolean | null;
      courseUpdates?: boolean | null;
      achievements?: boolean | null;
    };
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "courses".
 */
export interface Course {
  id: number;
  title: string;
  slug: string;
  tenant?: (number | null) | Tenant;
  isGlobal?: boolean | null;
  instructor: number | User;
  description: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  thumbnail: number | Media;
  modules?: (number | Module)[] | null;
  prerequisites?: (number | Course)[] | null;
  duration: {
    hours: number;
    minutes: number;
  };
  schedule: {
    startDate: string;
    endDate: string;
    enrollmentDeadline?: string | null;
  };
  status: 'draft' | 'published' | 'archived';
  settings?: {
    allowLateSubmissions?: boolean | null;
    requirePrerequisites?: boolean | null;
    showProgress?: boolean | null;
  };
  enrollment?: {
    capacity?: number | null;
    allowSelfEnrollment?: boolean | null;
    requirePrerequisiteCompletion?: boolean | null;
    enrollmentStart?: string | null;
    enrollmentEnd?: string | null;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "modules".
 */
export interface Module {
  id: number;
  title: string;
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  course: number | Course;
  order: number;
  lessons?: (number | Lesson)[] | null;
  duration: {
    hours: number;
    minutes: number;
  };
  status: 'draft' | 'published' | 'archived';
  completionCriteria: {
    type: 'all_lessons' | 'min_score' | 'custom';
    minimumScore?: number | null;
    customRule?: string | null;
  };
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "lessons".
 */
export interface Lesson {
  id: number;
  title: string;
  module: number | Module;
  order: number;
  type: 'video' | 'reading' | 'quiz' | 'assignment' | 'discussion';
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  video?: {
    url: string;
    duration: number;
    transcript?: string | null;
  };
  content?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  quiz?: {
    questions: {
      question: string;
      type: 'multiple' | 'boolean' | 'text';
      options?:
        | {
            text: string;
            correct: boolean;
            id?: string | null;
          }[]
        | null;
      answer?: string | null;
      points: number;
      explanation?: {
        root: {
          type: string;
          children: {
            type: string;
            version: number;
            [k: string]: unknown;
          }[];
          direction: ('ltr' | 'rtl') | null;
          format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
          indent: number;
          version: number;
        };
        [k: string]: unknown;
      } | null;
      id?: string | null;
    }[];
    settings: {
      timeLimit?: number | null;
      attempts?: number | null;
      passingScore: number;
      randomizeQuestions?: boolean | null;
      showCorrectAnswers?: ('never' | 'after_each' | 'after_submit' | 'after_all') | null;
    };
  };
  assignment?: {
    instructions: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    dueDate: string;
    points: number;
    rubric?:
      | {
          criterion: string;
          points: number;
          description?: string | null;
          id?: string | null;
        }[]
      | null;
    allowedFileTypes?: ('pdf' | 'doc' | 'image' | 'zip' | 'code')[] | null;
  };
  discussion?: {
    prompt: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    };
    guidelines?:
      | {
          text: string;
          id?: string | null;
        }[]
      | null;
    settings?: {
      requireResponse?: boolean | null;
      requireReplies?: number | null;
      minimumWords?: number | null;
      dueDate?: string | null;
    };
  };
  status: 'draft' | 'published' | 'archived';
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "progress".
 */
export interface Progress {
  id: number;
  student: number | User;
  course: number | Course;
  completedLessons?:
    | {
        relationTo: 'lessons';
        value: number | Lesson;
      }[]
    | null;
  quizAttempts?:
    | {
        lesson: {
          relationTo: 'lessons';
          value: number | Lesson;
        };
        score: number;
        answers:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        completedAt: string;
        id?: string | null;
      }[]
    | null;
  assignments?:
    | {
        lesson: {
          relationTo: 'lessons';
          value: number | Lesson;
        };
        submission:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        grade?: number | null;
        feedback?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        submittedAt: string;
        gradedAt?: string | null;
        id?: string | null;
      }[]
    | null;
  discussions?:
    | {
        lesson: {
          relationTo: 'lessons';
          value: number | Lesson;
        };
        post: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        };
        replies?:
          | {
              author: number | User;
              content: {
                root: {
                  type: string;
                  children: {
                    type: string;
                    version: number;
                    [k: string]: unknown;
                  }[];
                  direction: ('ltr' | 'rtl') | null;
                  format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                  indent: number;
                  version: number;
                };
                [k: string]: unknown;
              };
              postedAt: string;
              id?: string | null;
            }[]
          | null;
        postedAt: string;
        id?: string | null;
      }[]
    | null;
  overallProgress: number;
  pointsEarned: number;
  status: 'not_started' | 'in_progress' | 'completed';
  startedAt: string;
  lastAccessed: string;
  completedAt?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "enrollments".
 */
export interface Enrollment {
  id: number;
  student: number | User;
  course: number | Course;
  status: 'active' | 'completed' | 'dropped' | 'pending';
  enrolledAt: string;
  startedAt?: string | null;
  completedAt?: string | null;
  droppedAt?: string | null;
  expiresAt?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "levels".
 */
export interface Level {
  id: number;
  name: string;
  level: number;
  description?: string | null;
  pointsRequired: number;
  tenant?: (number | null) | Tenant;
  isGlobal?: boolean | null;
  icon: number | Media;
  rewards?:
    | {
        type: 'badge' | 'feature' | 'custom';
        badge?: (number | null) | Badge;
        feature?: string | null;
        customData?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "badges".
 */
export interface Badge {
  id: number;
  name: string;
  description: string;
  icon: number | Media;
  rarity: 'common' | 'uncommon' | 'rare' | 'epic' | 'legendary';
  category: 'progress' | 'performance' | 'engagement' | 'special';
  tenant?: (number | null) | Tenant;
  isGlobal?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "points".
 */
export interface Point {
  id: number;
  student: number | User;
  type:
    | 'lesson_complete'
    | 'quiz_score'
    | 'assignment_submit'
    | 'discussion_post'
    | 'streak_bonus'
    | 'achievement_unlock';
  amount: number;
  source: {
    type: 'lessons' | 'achievements' | 'streaks';
    lesson?: (number | null) | Lesson;
    achievement?: (number | null) | Achievement;
    streak?: (number | null) | Streak;
  };
  metadata?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "achievements".
 */
export interface Achievement {
  id: number;
  name: string;
  description: string;
  type: 'course_progress' | 'quiz_score' | 'assignment' | 'streak' | 'discussion' | 'custom';
  criteria: {
    metric: 'count' | 'score' | 'duration' | 'custom';
    threshold: number;
    timeframe?: ('all_time' | 'daily' | 'weekly' | 'monthly') | null;
    customRule?: string | null;
  };
  badge: number | Badge;
  points: number;
  secret?: boolean | null;
  tenant?: (number | null) | Tenant;
  isGlobal?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "streaks".
 */
export interface Streak {
  id: number;
  student: number | User;
  type: 'login' | 'progress' | 'quiz' | 'assignment';
  currentStreak: number;
  longestStreak: number;
  lastActivity: string;
  nextRequired: string;
  history?:
    | {
        date: string;
        activity:
          | {
              relationTo: 'courses';
              value: number | Course;
            }
          | {
              relationTo: 'lessons';
              value: number | Lesson;
            }
          | {
              relationTo: 'modules';
              value: number | Module;
            };
        points: number;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "leaderboards".
 */
export interface Leaderboard {
  id: number;
  name: string;
  tenant?: (number | null) | Tenant;
  isGlobal?: boolean | null;
  type: 'points' | 'progress' | 'achievements' | 'custom';
  timeframe: 'all_time' | 'daily' | 'weekly' | 'monthly';
  scope?: {
    course?: (number | null) | Course;
    pointType?: ('all' | 'lesson' | 'quiz' | 'assignment') | null;
    achievementType?: ('all' | 'course' | 'quiz' | 'streak') | null;
  };
  customLogic?: string | null;
  displayLimit: number;
  refreshInterval: number;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'tenants';
        value: number | Tenant;
      } | null)
    | ({
        relationTo: 'student-settings';
        value: number | StudentSetting;
      } | null)
    | ({
        relationTo: 'courses';
        value: number | Course;
      } | null)
    | ({
        relationTo: 'modules';
        value: number | Module;
      } | null)
    | ({
        relationTo: 'lessons';
        value: number | Lesson;
      } | null)
    | ({
        relationTo: 'progress';
        value: number | Progress;
      } | null)
    | ({
        relationTo: 'enrollments';
        value: number | Enrollment;
      } | null)
    | ({
        relationTo: 'levels';
        value: number | Level;
      } | null)
    | ({
        relationTo: 'points';
        value: number | Point;
      } | null)
    | ({
        relationTo: 'badges';
        value: number | Badge;
      } | null)
    | ({
        relationTo: 'achievements';
        value: number | Achievement;
      } | null)
    | ({
        relationTo: 'leaderboards';
        value: number | Leaderboard;
      } | null)
    | ({
        relationTo: 'streaks';
        value: number | Streak;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  role?: T;
  tenant?: T;
  name?: T;
  avatar?: T;
  settings?: T;
  updatedAt?: T;
  createdAt?: T;
  enableAPIKey?: T;
  apiKey?: T;
  apiKeyIndex?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  tenant?: T;
  isGlobal?: T;
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        card?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tenants_select".
 */
export interface TenantsSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  settings?:
    | T
    | {
        theme?: T;
        logo?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "student-settings_select".
 */
export interface StudentSettingsSelect<T extends boolean = true> {
  user?: T;
  preferences?:
    | T
    | {
        theme?: T;
        emailNotifications?:
          | T
          | {
              assignments?: T;
              courseUpdates?: T;
              achievements?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "courses_select".
 */
export interface CoursesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  tenant?: T;
  isGlobal?: T;
  instructor?: T;
  description?: T;
  thumbnail?: T;
  modules?: T;
  prerequisites?: T;
  duration?:
    | T
    | {
        hours?: T;
        minutes?: T;
      };
  schedule?:
    | T
    | {
        startDate?: T;
        endDate?: T;
        enrollmentDeadline?: T;
      };
  status?: T;
  settings?:
    | T
    | {
        allowLateSubmissions?: T;
        requirePrerequisites?: T;
        showProgress?: T;
      };
  enrollment?:
    | T
    | {
        capacity?: T;
        allowSelfEnrollment?: T;
        requirePrerequisiteCompletion?: T;
        enrollmentStart?: T;
        enrollmentEnd?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "modules_select".
 */
export interface ModulesSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  course?: T;
  order?: T;
  lessons?: T;
  duration?:
    | T
    | {
        hours?: T;
        minutes?: T;
      };
  status?: T;
  completionCriteria?:
    | T
    | {
        type?: T;
        minimumScore?: T;
        customRule?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "lessons_select".
 */
export interface LessonsSelect<T extends boolean = true> {
  title?: T;
  module?: T;
  order?: T;
  type?: T;
  description?: T;
  video?:
    | T
    | {
        url?: T;
        duration?: T;
        transcript?: T;
      };
  content?: T;
  quiz?:
    | T
    | {
        questions?:
          | T
          | {
              question?: T;
              type?: T;
              options?:
                | T
                | {
                    text?: T;
                    correct?: T;
                    id?: T;
                  };
              answer?: T;
              points?: T;
              explanation?: T;
              id?: T;
            };
        settings?:
          | T
          | {
              timeLimit?: T;
              attempts?: T;
              passingScore?: T;
              randomizeQuestions?: T;
              showCorrectAnswers?: T;
            };
      };
  assignment?:
    | T
    | {
        instructions?: T;
        dueDate?: T;
        points?: T;
        rubric?:
          | T
          | {
              criterion?: T;
              points?: T;
              description?: T;
              id?: T;
            };
        allowedFileTypes?: T;
      };
  discussion?:
    | T
    | {
        prompt?: T;
        guidelines?:
          | T
          | {
              text?: T;
              id?: T;
            };
        settings?:
          | T
          | {
              requireResponse?: T;
              requireReplies?: T;
              minimumWords?: T;
              dueDate?: T;
            };
      };
  status?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "progress_select".
 */
export interface ProgressSelect<T extends boolean = true> {
  student?: T;
  course?: T;
  completedLessons?: T;
  quizAttempts?:
    | T
    | {
        lesson?: T;
        score?: T;
        answers?: T;
        completedAt?: T;
        id?: T;
      };
  assignments?:
    | T
    | {
        lesson?: T;
        submission?: T;
        grade?: T;
        feedback?: T;
        submittedAt?: T;
        gradedAt?: T;
        id?: T;
      };
  discussions?:
    | T
    | {
        lesson?: T;
        post?: T;
        replies?:
          | T
          | {
              author?: T;
              content?: T;
              postedAt?: T;
              id?: T;
            };
        postedAt?: T;
        id?: T;
      };
  overallProgress?: T;
  pointsEarned?: T;
  status?: T;
  startedAt?: T;
  lastAccessed?: T;
  completedAt?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "enrollments_select".
 */
export interface EnrollmentsSelect<T extends boolean = true> {
  student?: T;
  course?: T;
  status?: T;
  enrolledAt?: T;
  startedAt?: T;
  completedAt?: T;
  droppedAt?: T;
  expiresAt?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "levels_select".
 */
export interface LevelsSelect<T extends boolean = true> {
  name?: T;
  level?: T;
  description?: T;
  pointsRequired?: T;
  tenant?: T;
  isGlobal?: T;
  icon?: T;
  rewards?:
    | T
    | {
        type?: T;
        badge?: T;
        feature?: T;
        customData?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "points_select".
 */
export interface PointsSelect<T extends boolean = true> {
  student?: T;
  type?: T;
  amount?: T;
  source?:
    | T
    | {
        type?: T;
        lesson?: T;
        achievement?: T;
        streak?: T;
      };
  metadata?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "badges_select".
 */
export interface BadgesSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  icon?: T;
  rarity?: T;
  category?: T;
  tenant?: T;
  isGlobal?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "achievements_select".
 */
export interface AchievementsSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  type?: T;
  criteria?:
    | T
    | {
        metric?: T;
        threshold?: T;
        timeframe?: T;
        customRule?: T;
      };
  badge?: T;
  points?: T;
  secret?: T;
  tenant?: T;
  isGlobal?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "leaderboards_select".
 */
export interface LeaderboardsSelect<T extends boolean = true> {
  name?: T;
  tenant?: T;
  isGlobal?: T;
  type?: T;
  timeframe?: T;
  scope?:
    | T
    | {
        course?: T;
        pointType?: T;
        achievementType?: T;
      };
  customLogic?: T;
  displayLimit?: T;
  refreshInterval?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "streaks_select".
 */
export interface StreaksSelect<T extends boolean = true> {
  student?: T;
  type?: T;
  currentStreak?: T;
  longestStreak?: T;
  lastActivity?: T;
  nextRequired?: T;
  history?:
    | T
    | {
        date?: T;
        activity?: T;
        points?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}